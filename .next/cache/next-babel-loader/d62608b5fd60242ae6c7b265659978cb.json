{"ast":null,"code":"var _jsxFileName = \"/Users/mroudnitski/dev/koala/pages/blog/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Article from \"../../components/Blog/Article/Article\";\n\nconst Post = ({\n  post\n}) => {\n  // const { slug } = useRouter().query;\n  // const [post, setPost] = useState({\n  //   requestComplete: false,\n  //   data: null,\n  // });\n  // useEffect(() => {\n  //   fetch(`${process.env.WP_API}/posts?slug=${slug}&_embed`)\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //       data = data[0];\n  //       setPost({ requestComplete: true, data });\n  //     })\n  //     .catch(() => setPost({ requestComplete: true }));\n  // }, [slug]);\n  let content = null;\n\n  if (!post.requestComplete) {\n    content = __jsx(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(Spinner, {\n      className: \"mx-auto\",\n      variant: \"primary\",\n      role: \"status\",\n      animation: \"border\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }));\n  } else if (post.data) {\n    content = __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, __jsx(Col, {\n      className: \"post mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: \"/blog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, \"Back to posts\"), __jsx(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }), __jsx(Article, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return content ? content : \"Sorry... couldn't find what you were looking for\";\n}; // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch(`${process.env.WP_API}/posts`);\n  const posts = await res.json();\n  console.log({\n    posts\n  }); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      slug: post.slug\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  const res = await fetch(`${process.env.WP_API}/posts?slug=${params.slug}&_embed`);\n  const post = await res.json()[0]; // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["/Users/mroudnitski/dev/koala/pages/blog/[slug].js"],"names":["useState","useEffect","useRouter","Container","Col","Spinner","Article","Post","post","content","requestComplete","data","getStaticPaths","res","fetch","process","env","WP_API","posts","json","console","log","paths","map","params","slug","fallback","getStaticProps","props"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,OAAP,MAAoB,uCAApB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACzB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAIC,OAAO,GAAG,IAAd;;AACA,MAAI,CAACD,IAAI,CAACE,eAAV,EAA2B;AACzBD,IAAAA,OAAO,GACL;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,SAAS,EAAC,SADZ;AAEE,MAAA,OAAO,EAAC,SAFV;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,SAAS,EAAC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAUD,GAXD,MAWO,IAAID,IAAI,CAACG,IAAT,EAAe;AACpBF,IAAAA,OAAO,GACL,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,MAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,CADF;AASD;;AAED,SAAOC,OAAO,GAAGA,OAAH,GAAa,kDAA3B;AACD,CA1CD,C,CA4CA;;;AACA,OAAO,eAAeG,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,MAAO,QAAvB,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAML,GAAG,CAACM,IAAJ,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ,EAJqC,CAMrC;;AACA,QAAMI,KAAK,GAAGJ,KAAK,CAACK,GAAN,CAAWf,IAAD,KAAW;AACjCgB,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAEjB,IAAI,CAACiB;AAAb;AADyB,GAAX,CAAV,CAAd,CAPqC,CAWrC;AACA;;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASI,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMX,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAEC,OAAO,CAACC,GAAR,CAAYC,MAAO,eAAcO,MAAM,CAACC,IAAK,SAD3B,CAAvB;AAGA,QAAMjB,IAAI,GAAG,MAAMK,GAAG,CAACM,IAAJ,GAAW,CAAX,CAAnB,CAJ+C,CAM/C;;AACA,SAAO;AAAES,IAAAA,KAAK,EAAE;AAAEpB,MAAAA;AAAF;AAAT,GAAP;AACD;AAED,eAAeD,IAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Article from \"../../components/Blog/Article/Article\";\n\nconst Post = ({ post }) => {\n  // const { slug } = useRouter().query;\n  // const [post, setPost] = useState({\n  //   requestComplete: false,\n  //   data: null,\n  // });\n\n  // useEffect(() => {\n  //   fetch(`${process.env.WP_API}/posts?slug=${slug}&_embed`)\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //       data = data[0];\n  //       setPost({ requestComplete: true, data });\n  //     })\n  //     .catch(() => setPost({ requestComplete: true }));\n  // }, [slug]);\n\n  let content = null;\n  if (!post.requestComplete) {\n    content = (\n      <div className=\"text-center\">\n        <Spinner\n          className=\"mx-auto\"\n          variant=\"primary\"\n          role=\"status\"\n          animation=\"border\"\n        />\n      </div>\n    );\n  } else if (post.data) {\n    content = (\n      <Container>\n        <Col className=\"post mx-auto\">\n          <a href=\"/blog\">Back to posts</a>\n          <hr />\n          <Article post={post} />\n        </Col>\n      </Container>\n    );\n  }\n\n  return content ? content : \"Sorry... couldn't find what you were looking for\";\n};\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch(`${process.env.WP_API}/posts`);\n  const posts = await res.json();\n  console.log({ posts });\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { slug: post.slug },\n  }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  const res = await fetch(\n    `${process.env.WP_API}/posts?slug=${params.slug}&_embed`\n  );\n  const post = await res.json()[0];\n\n  // Pass post data to the page via props\n  return { props: { post } };\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}